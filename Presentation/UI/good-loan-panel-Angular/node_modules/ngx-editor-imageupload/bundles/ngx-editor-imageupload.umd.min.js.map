{"version":3,"sources":["ng://ngx-editor-imageupload/app/ngx-editor/common/utils/ngx-editor.utils.ts","ng://ngx-editor-imageupload/app/ngx-editor/common/services/command-executor.service.ts","ng://ngx-editor-imageupload/app/ngx-editor/common/services/message.service.ts","ng://ngx-editor-imageupload/app/ngx-editor/common/ngx-editor.defaults.ts","ng://ngx-editor-imageupload/app/ngx-editor/ngx-editor.component.ts","ng://ngx-editor-imageupload/app/ngx-editor/ngx-grippie/ngx-grippie.component.ts","ng://ngx-editor-imageupload/app/ngx-editor/ngx-editor-message/ngx-editor-message.component.ts","ng://ngx-editor-imageupload/app/ngx-editor/ngx-editor-toolbar/ngx-editor-toolbar.component.ts","ng://ngx-editor-imageupload/app/ngx-editor/ngx-editor.module.ts","ng://ngx-editor-imageupload/app/ngx-editor/validators/maxlength-validator.ts"],"names":["canEnableToolbarOptions","value","toolbar","filter","array","indexOf","length","saveSelection","window","getSelection","sel","getRangeAt","rangeCount","document","createRange","restoreSelection","range","removeAllRanges","addRange","select","getEditorConfiguration","ngxEditorConfig","input","i","undefined","hasOwnProperty","canResize","resizer","CommandExecutorService","_http","this","savedSelection","prototype","execute","command","Error","execCommand","insertImage","imageURI","Utils.restoreSelection","insertVideo","videParams","isYoutubeLink","videoUrl","youtubeURL","width","height","insertHtml","checkTagSupportInBrowser","isValidURL","videoSrc","url","test","uploadImage","file","endPoint","formData","FormData","append","req","HttpRequest","reportProgress","request","createLink","params","urlNewTab","newUrl","urlLink","urlText","type","insertColor","color","where","checkSelection","setFontSize","fontSize","deletedValue","deleteAndGetElement","isNumeric","fontPx","setFontName","fontName","fontFamily","html","slectedText","toString","deleteContents","tag","createElement","HTMLUnknownElement","Injectable","HttpClient","MessageService","message","Subject","getMessage","asObservable","sendMessage","next","clearMessageIn","milliseconds","_this","setTimeout","editable","spellcheck","minHeight","minWidth","translate","enableToolbar","showToolbar","placeholder","imageEndPoint","NgxEditorComponent","_messageService","_commandExecutor","_renderer","config","blur","EventEmitter","focus","Utils","onTextAreaFocus","emit","onEditorFocus","textArea","nativeElement","onContentChange","innerHTML","onChange","togglePlaceholder","onTextAreaBlur","Utils.saveSelection","onTouched","onUploadImage","image","resizeTextArea","offsetY","newHeight","parseInt","style","executeCommand","commandName","error","writeValue","refreshView","registerOnChange","fn","registerOnTouched","normalizedValue","setProperty","removeClass","ngxWrapper","addClass","getCollectiveParams","ngOnInit","offsetHeight","ngOnChanges","changes","uploadedImagePath","prevUploadedImagePath","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","Input","Output","ViewChild","NgxGrippieComponent","_editorComponent","oldY","grabber","onMouseMove","event","clientY","onMouseUp","onResize","preventDefault","HostListener","NgxEditorMessageComponent","ngxMessage","subscribe","clearMessage","NgxEditorToolbarComponent","_popOverConfig","_formBuilder","_commandExecutorService","uploadComplete","updloadPercentage","isUploading","selectedColorTab","hexColor","isImageUploader","outsideClick","placement","container","Utils.canEnableToolbarOptions","triggerCommand","buildUrlForm","urlForm","group","Validators","required","insertLink","urlPopover","hide","buildImageForm","imageForm","imageUrl","buildVideoForm","videoForm","onFileChange","e","target","files","Math","round","loaded","total","HttpResponse","body","imagepath","imagePopover","videoPopover","colorPopover","fontSizePopover","PopoverConfig","FormBuilder","NgxEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","PopoverModule","forRoot","declarations","exports","MaxLengthValidator","maxlength","options","control","innerText","DOMParser","parseFromString","excludeLineBreaks","replace","concatWhiteSpaces","excludeWhiteSpaces","ngxEditor","allowedLength","textLength"],"mappings":"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","sourcesContent":["/**\r\n * enable or disable toolbar based on configuration\r\n *\r\n * @param value toolbar item\r\n * @param toolbar toolbar configuration object\r\n */\r\nexport function canEnableToolbarOptions(value: string, toolbar: any): boolean {\r\n  if (value) {\r\n    if (toolbar['length'] === 0) {\r\n      return true;\r\n    } else {\r\n      const found = toolbar.filter(array => {\r\n        return array.indexOf(value) !== -1;\r\n      });\r\n\r\n      return found.length ? true : false;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * set editor configuration\r\n *\r\n * @param value configuration via [config] property\r\n * @param ngxEditorConfig default editor configuration\r\n * @param input direct configuration inputs via directives\r\n */\r\nexport function getEditorConfiguration(value: any, ngxEditorConfig: any, input: any): any {\r\n  for (const i in ngxEditorConfig) {\r\n    if (i) {\r\n      if (input[i] !== undefined) {\r\n        value[i] = input[i];\r\n      }\r\n      if (!value.hasOwnProperty(i)) {\r\n        value[i] = ngxEditorConfig[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\n/**\r\n * return vertical if the element is the resizer property is set to basic\r\n *\r\n * @param resizer type of resizer, either basic or stack\r\n */\r\nexport function canResize(resizer: string): any {\r\n  if (resizer === 'basic') {\r\n    return 'vertical';\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * save selection when the editor is focussed out\r\n */\r\nexport function saveSelection(): any {\r\n  if (window.getSelection) {\r\n    const sel = window.getSelection();\r\n    if (sel.getRangeAt && sel.rangeCount) {\r\n      return sel.getRangeAt(0);\r\n    }\r\n  } else if (document.getSelection && document.createRange) {\r\n    return document.createRange();\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * restore selection when the editor is focussed in\r\n *\r\n * @param range saved selection when the editor is focussed out\r\n */\r\nexport function restoreSelection(range): boolean {\r\n  if (range) {\r\n    if (window.getSelection) {\r\n      const sel = window.getSelection();\r\n      sel.removeAllRanges();\r\n      sel.addRange(range);\r\n      return true;\r\n    } else if (document.getSelection && range.select) {\r\n      range.select();\r\n      return true;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpRequest } from '@angular/common/http';\r\nimport * as Utils from '../utils/ngx-editor.utils';\r\n\r\n@Injectable()\r\nexport class CommandExecutorService {\r\n  /** saves the selection from the editor when focussed out */\r\n  savedSelection: any = undefined;\r\n\r\n  /**\r\n   *\r\n   * @param _http HTTP Client for making http requests\r\n   */\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  /**\r\n   * executes command from the toolbar\r\n   *\r\n   * @param command command to be executed\r\n   */\r\n  execute(command: string): void {\r\n    if (!this.savedSelection && command !== 'enableObjectResizing') {\r\n      throw new Error('Range out of Editor');\r\n    }\r\n\r\n    if (command === 'enableObjectResizing') {\r\n      document.execCommand('enableObjectResizing', true);\r\n    }\r\n\r\n    if (command === 'blockquote') {\r\n      document.execCommand('formatBlock', false, 'blockquote');\r\n    }\r\n\r\n    if (command === 'removeBlockquote') {\r\n      document.execCommand('formatBlock', false, 'div');\r\n    }\r\n\r\n    document.execCommand(command, false, null);\r\n  }\r\n\r\n  /**\r\n   * inserts image in the editor\r\n   *\r\n   * @param imageURI url of the image to be inserted\r\n   */\r\n  insertImage(imageURI: string): void {\r\n    if (this.savedSelection) {\r\n      if (imageURI) {\r\n        const restored = Utils.restoreSelection(this.savedSelection);\r\n        if (restored) {\r\n          const inserted = document.execCommand('insertImage', false, imageURI);\r\n          if (!inserted) {\r\n            throw new Error('Invalid URL');\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error('Range out of the editor');\r\n    }\r\n  }\r\n\r\n  /**\r\n * inserts image in the editor\r\n *\r\n * @param videParams url of the image to be inserted\r\n */\r\n  insertVideo(videParams: any): void {\r\n    if (this.savedSelection) {\r\n      if (videParams) {\r\n        const restored = Utils.restoreSelection(this.savedSelection);\r\n        if (restored) {\r\n          if (this.isYoutubeLink(videParams.videoUrl)) {\r\n            const youtubeURL = '<iframe width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\r\n              + 'src=\"' + videParams.videoUrl + '\"></iframe>';\r\n            this.insertHtml(youtubeURL);\r\n          } else if (this.checkTagSupportInBrowser('video')) {\r\n\r\n            if (this.isValidURL(videParams.videoUrl)) {\r\n              const videoSrc = '<video width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\r\n                + ' controls=\"true\"><source src=\"' + videParams.videoUrl + '\"></video>';\r\n              this.insertHtml(videoSrc);\r\n            } else {\r\n              throw new Error('Invalid video URL');\r\n            }\r\n\r\n          } else {\r\n            throw new Error('Unable to insert video');\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error('Range out of the editor');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * checks the input url is a valid youtube URL or not\r\n   *\r\n   * @param url Youtue URL\r\n   */\r\n  private isYoutubeLink(url: string): boolean {\r\n    const ytRegExp = /^(http(s)?:\\/\\/)?((w){3}.)?youtu(be|.be)?(\\.com)?\\/.+/;\r\n    return ytRegExp.test(url);\r\n  }\r\n\r\n  /**\r\n   * check whether the string is a valid url or not\r\n   * @param url url\r\n   */\r\n  private isValidURL(url: string) {\r\n    const urlRegExp = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\r\n    return urlRegExp.test(url);\r\n  }\r\n\r\n  /**\r\n   * uploads image to the server\r\n   *\r\n   * @param file file that has to be uploaded\r\n   * @param endPoint enpoint to which the image has to be uploaded\r\n   */\r\n  uploadImage(file: File, endPoint: string): any {\r\n    if (!endPoint) {\r\n      throw new Error('Image Endpoint isn`t provided or invalid');\r\n    }\r\n\r\n    const formData: FormData = new FormData();\r\n\r\n    if (file) {\r\n\r\n      formData.append('file', file);\r\n\r\n      const req = new HttpRequest('POST', endPoint, formData, {\r\n        reportProgress: true\r\n      });\r\n\r\n      return this._http.request(req);\r\n\r\n    } else {\r\n      throw new Error('Invalid Image');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * inserts link in the editor\r\n   *\r\n   * @param params parameters that holds the information for the link\r\n   */\r\n  createLink(params: any): void {\r\n    if (this.savedSelection) {\r\n      /**\r\n       * check whether the saved selection contains a range or plain selection\r\n       */\r\n      if (params.urlNewTab) {\r\n        const newUrl = '<a href=\"' + params.urlLink + '\" target=\"_blank\">' + params.urlText + '</a>';\r\n\r\n        if (document.getSelection().type !== 'Range') {\r\n          const restored = Utils.restoreSelection(this.savedSelection);\r\n          if (restored) {\r\n            this.insertHtml(newUrl);\r\n          }\r\n        } else {\r\n          throw new Error('Only new links can be inserted. You cannot edit URL`s');\r\n        }\r\n      } else {\r\n        const restored = Utils.restoreSelection(this.savedSelection);\r\n        if (restored) {\r\n          document.execCommand('createLink', false, params.urlLink);\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error('Range out of the editor');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * insert color either font or background\r\n   *\r\n   * @param color color to be inserted\r\n   * @param where where the color has to be inserted either text/background\r\n   */\r\n  insertColor(color: string, where: string): void {\r\n    if (this.savedSelection) {\r\n      const restored = Utils.restoreSelection(this.savedSelection);\r\n      if (restored && this.checkSelection()) {\r\n        if (where === 'textColor') {\r\n          document.execCommand('foreColor', false, color);\r\n        } else {\r\n          document.execCommand('hiliteColor', false, color);\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error('Range out of the editor');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * set font size for text\r\n   *\r\n   * @param fontSize font-size to be set\r\n   */\r\n  setFontSize(fontSize: string): void {\r\n    if (this.savedSelection && this.checkSelection()) {\r\n      const deletedValue = this.deleteAndGetElement();\r\n\r\n      if (deletedValue) {\r\n        const restored = Utils.restoreSelection(this.savedSelection);\r\n\r\n        if (restored) {\r\n          if (this.isNumeric(fontSize)) {\r\n            const fontPx = '<span style=\"font-size: ' + fontSize + 'px;\">' + deletedValue + '</span>';\r\n            this.insertHtml(fontPx);\r\n          } else {\r\n            const fontPx = '<span style=\"font-size: ' + fontSize + ';\">' + deletedValue + '</span>';\r\n            this.insertHtml(fontPx);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error('Range out of the editor');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * set font name/family for text\r\n   *\r\n   * @param fontName font-family to be set\r\n   */\r\n  setFontName(fontName: string): void {\r\n    if (this.savedSelection && this.checkSelection()) {\r\n      const deletedValue = this.deleteAndGetElement();\r\n\r\n      if (deletedValue) {\r\n        const restored = Utils.restoreSelection(this.savedSelection);\r\n\r\n        if (restored) {\r\n          if (this.isNumeric(fontName)) {\r\n            const fontFamily = '<span style=\"font-family: ' + fontName + 'px;\">' + deletedValue + '</span>';\r\n            this.insertHtml(fontFamily);\r\n          } else {\r\n            const fontFamily = '<span style=\"font-family: ' + fontName + ';\">' + deletedValue + '</span>';\r\n            this.insertHtml(fontFamily);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error('Range out of the editor');\r\n    }\r\n  }\r\n\r\n  /** insert HTML */\r\n  private insertHtml(html: string): void {\r\n    const isHTMLInserted = document.execCommand('insertHTML', false, html);\r\n\r\n    if (!isHTMLInserted) {\r\n      throw new Error('Unable to perform the operation');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * check whether the value is a number or string\r\n   * if number return true\r\n   * else return false\r\n   */\r\n  private isNumeric(value: any): boolean {\r\n    return /^-{0,1}\\d+$/.test(value);\r\n  }\r\n\r\n  /** delete the text at selected range and return the value */\r\n  private deleteAndGetElement(): any {\r\n    let slectedText;\r\n\r\n    if (this.savedSelection) {\r\n      slectedText = this.savedSelection.toString();\r\n      this.savedSelection.deleteContents();\r\n      return slectedText;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** check any slection is made or not */\r\n  private checkSelection(): any {\r\n    const slectedText = this.savedSelection.toString();\r\n\r\n    if (slectedText.length === 0) {\r\n      throw new Error('No Selection Made');\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * check tag is supported by browser or not\r\n   *\r\n   * @param tag HTML tag\r\n   */\r\n  private checkTagSupportInBrowser(tag: string): boolean {\r\n    return !(document.createElement(tag) instanceof HTMLUnknownElement);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n\r\n/** time in which the message has to be cleared */\r\nconst DURATION = 7000;\r\n\r\n@Injectable()\r\nexport class MessageService {\r\n  /** variable to hold the user message */\r\n  private message: Subject<string> = new Subject();\r\n\r\n  constructor() { }\r\n\r\n  /** returns the message sent by the editor */\r\n  getMessage(): Observable<string> {\r\n    return this.message.asObservable();\r\n  }\r\n\r\n  /**\r\n   * sends message to the editor\r\n   *\r\n   * @param message message to be sent\r\n   */\r\n  sendMessage(message: string): void {\r\n    this.message.next(message);\r\n    this.clearMessageIn(DURATION);\r\n  }\r\n\r\n  /**\r\n   * a short interval to clear message\r\n   *\r\n   * @param milliseconds time in seconds in which the message has to be cleared\r\n   */\r\n  private clearMessageIn(milliseconds: number): void {\r\n    setTimeout(() => {\r\n      this.message.next(undefined);\r\n    }, milliseconds);\r\n  }\r\n}\r\n","/**\r\n * toolbar default configuration\r\n */\r\nexport const ngxEditorConfig = {\r\n  editable: true,\r\n  spellcheck: true,\r\n  height: 'auto',\r\n  minHeight: '0',\r\n  width: 'auto',\r\n  minWidth: '0',\r\n  translate: 'yes',\r\n  enableToolbar: true,\r\n  showToolbar: true,\r\n  placeholder: 'Enter text here...',\r\n  imageEndPoint: '',\r\n  toolbar: [\r\n    ['bold', 'italic', 'underline', 'strikeThrough', 'superscript', 'subscript'],\r\n    ['fontName', 'fontSize', 'color'],\r\n    ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent'],\r\n    ['cut', 'copy', 'delete', 'removeFormat', 'undo', 'redo'],\r\n    ['paragraph', 'blockquote', 'removeBlockquote', 'horizontalLine', 'orderedList', 'unorderedList'],\r\n    ['link', 'unlink', 'image', 'video']\r\n  ]\r\n};\r\n","import {\r\n  Component, OnInit, Input, Output, ViewChild,\r\n  EventEmitter, Renderer2, forwardRef, SimpleChanges, OnChanges\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { CommandExecutorService } from './common/services/command-executor.service';\r\nimport { MessageService } from './common/services/message.service';\r\n\r\nimport { ngxEditorConfig } from './common/ngx-editor.defaults';\r\nimport * as Utils from './common/utils/ngx-editor.utils';\r\n\r\n@Component({\r\n  selector: 'app-ngx-editor',\r\n  templateUrl: './ngx-editor.component.html',\r\n  styleUrls: ['./ngx-editor.component.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgxEditorComponent),\r\n    multi: true\r\n  }]\r\n})\r\n\r\nexport class NgxEditorComponent implements OnInit, ControlValueAccessor, OnChanges {\r\n  /** Specifies weather the textarea to be editable or not */\r\n  @Input() editable: boolean;\r\n  /** The spellcheck property specifies whether the element is to have its spelling and grammar checked or not. */\r\n  @Input() spellcheck: boolean;\r\n  /** Placeholder for the textArea */\r\n  @Input() placeholder: string;\r\n  /**\r\n   * The translate property specifies whether the content of an element should be translated or not.\r\n   *\r\n   * Check https://www.w3schools.com/tags/att_global_translate.asp for more information and browser support\r\n   */\r\n  @Input() translate: string;\r\n  /** Sets height of the editor */\r\n  @Input() height: string;\r\n  /** Sets minimum height for the editor */\r\n  @Input() minHeight: string;\r\n  /** Sets Width of the editor */\r\n  @Input() width: string;\r\n  /** Sets minimum width of the editor */\r\n  @Input() minWidth: string;\r\n  /**\r\n   * Toolbar accepts an array which specifies the options to be enabled for the toolbar\r\n   *\r\n   * Check ngxEditorConfig for toolbar configuration\r\n   *\r\n   * Passing an empty array will enable all toolbar\r\n   */\r\n  @Input() toolbar: Object;\r\n  /**\r\n   * The editor can be resized vertically.\r\n   *\r\n   * `basic` resizer enables the html5 reszier. Check here https://www.w3schools.com/cssref/css3_pr_resize.asp\r\n   *\r\n   * `stack` resizer enable a resizer that looks like as if in https://stackoverflow.com\r\n   */\r\n  @Input() resizer = 'stack';\r\n  /**\r\n   * The config property is a JSON object\r\n   *\r\n   * All avaibale inputs inputs can be provided in the configuration as JSON\r\n   * inputs provided directly are considered as top priority\r\n   */\r\n  @Input() config = ngxEditorConfig;\r\n  @Input() uploadedImagePath: string;\r\n  /** Weather to show or hide toolbar */\r\n  @Input() showToolbar: boolean;\r\n  /** Weather to enable or disable the toolbar */\r\n  @Input() enableToolbar: boolean;\r\n  /** Endpoint for which the image to be uploaded */\r\n  @Input() imageEndPoint: string;\r\n\r\n  /** emits `blur` event when focused out from the textarea */\r\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\r\n  /** emits `focus` event when focused in to the textarea */\r\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\r\n  /** emits `uploadImage` event when image is selected */\r\n  @Output() uploadImage: EventEmitter<HTMLInputElement> = new EventEmitter<HTMLInputElement>();\r\n\r\n  @ViewChild('ngxTextArea') textArea: any;\r\n  @ViewChild('ngxWrapper') ngxWrapper: any;\r\n\r\n  Utils: any = Utils;\r\n\r\n  private onChange: (value: string) => void;\r\n  private onTouched: () => void;\r\n  prevUploadedImagePath: string;\r\n\r\n  /**\r\n   * @param _messageService service to send message to the editor message component\r\n   * @param _commandExecutor executes command from the toolbar\r\n   * @param _renderer access and manipulate the dom element\r\n   */\r\n  constructor(\r\n    private _messageService: MessageService,\r\n    private _commandExecutor: CommandExecutorService,\r\n    private _renderer: Renderer2) { }\r\n\r\n  /**\r\n   * events\r\n   */\r\n  onTextAreaFocus(): void {\r\n    this.focus.emit('focus');\r\n  }\r\n\r\n  /** focus the text area when the editor is focussed */\r\n  onEditorFocus() {\r\n    this.textArea.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Executed from the contenteditable section while the input property changes\r\n   * @param html html string from contenteditable\r\n   */\r\n  onContentChange(innerHTML: string): void {\r\n    if (typeof this.onChange === 'function') {\r\n      this.onChange(innerHTML);\r\n      this.togglePlaceholder(innerHTML);\r\n    }\r\n  }\r\n\r\n  onTextAreaBlur(): void {\r\n    /** save selection if focussed out */\r\n    this._commandExecutor.savedSelection = Utils.saveSelection();\r\n\r\n    if (typeof this.onTouched === 'function') {\r\n      this.onTouched();\r\n    }\r\n    this.blur.emit('blur');\r\n  }\r\n\r\n  /**\r\n   * Executed when the image from the disc is selected\r\n   * @param image uploaded file object\r\n   */\r\n  onUploadImage(image: HTMLInputElement): void {\r\n    this.uploadImage.emit(image);\r\n  }\r\n\r\n  /**\r\n   * resizing text area\r\n   *\r\n   * @param offsetY vertical height of the eidtable portion of the editor\r\n   */\r\n  resizeTextArea(offsetY: number): void {\r\n    let newHeight = parseInt(this.height, 10);\r\n    newHeight += offsetY;\r\n    this.height = newHeight + 'px';\r\n    this.textArea.nativeElement.style.height = this.height;\r\n  }\r\n\r\n  /**\r\n   * editor actions, i.e., executes command from toolbar\r\n   *\r\n   * @param commandName name of the command to be executed\r\n   */\r\n  executeCommand(commandName: string): void {\r\n    try {\r\n      this._commandExecutor.execute(commandName);\r\n    } catch (error) {\r\n      this._messageService.sendMessage(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write a new value to the element.\r\n   *\r\n   * @param value value to be executed when there is a change in contenteditable\r\n   */\r\n  writeValue(value: any): void {\r\n    this.togglePlaceholder(value);\r\n\r\n    if (value === null || value === undefined || value === '' || value === '<br>') {\r\n      value = null;\r\n    }\r\n\r\n    this.refreshView(value);\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called\r\n   * when the control receives a change event.\r\n   *\r\n   * @param fn a function\r\n   */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called\r\n   * when the control receives a touch event.\r\n   *\r\n   * @param fn a function\r\n   */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * refresh view/HTML of the editor\r\n   *\r\n   * @param value html string from the editor\r\n   */\r\n  refreshView(value: string): void {\r\n    const normalizedValue = value === null ? '' : value;\r\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\r\n  }\r\n\r\n  /**\r\n   * toggles placeholder based on input string\r\n   *\r\n   * @param value A HTML string from the editor\r\n   */\r\n  togglePlaceholder(value: any): void {\r\n    if (!value || value === '<br>' || value === '') {\r\n      this._renderer.addClass(this.ngxWrapper.nativeElement, 'show-placeholder');\r\n    } else {\r\n      this._renderer.removeClass(this.ngxWrapper.nativeElement, 'show-placeholder');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * returns a json containing input params\r\n   */\r\n  getCollectiveParams(): any {\r\n    return {\r\n      editable: this.editable,\r\n      spellcheck: this.spellcheck,\r\n      placeholder: this.placeholder,\r\n      translate: this.translate,\r\n      height: this.height,\r\n      minHeight: this.minHeight,\r\n      width: this.width,\r\n      minWidth: this.minWidth,\r\n      enableToolbar: this.enableToolbar,\r\n      showToolbar: this.showToolbar,\r\n      imageEndPoint: this.imageEndPoint,\r\n      toolbar: this.toolbar\r\n    };\r\n  }\r\n\r\n  ngOnInit() {\r\n    /**\r\n     * set configuartion\r\n     */\r\n    this.config = this.Utils.getEditorConfiguration(this.config, ngxEditorConfig, this.getCollectiveParams());\r\n\r\n    this.height = this.height || this.textArea.nativeElement.offsetHeight;\r\n\r\n    this.executeCommand('enableObjectResizing');\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.uploadedImagePath && this.uploadedImagePath !== this.prevUploadedImagePath) {\r\n      this._commandExecutor.insertImage(this.uploadedImagePath);\r\n      this.prevUploadedImagePath = this.uploadedImagePath;\r\n    }\r\n  }\r\n}\r\n","import { Component, HostListener } from '@angular/core';\r\nimport { NgxEditorComponent } from '../ngx-editor.component';\r\n\r\n@Component({\r\n  selector: 'app-ngx-grippie',\r\n  templateUrl: './ngx-grippie.component.html',\r\n  styleUrls: ['./ngx-grippie.component.scss']\r\n})\r\n\r\nexport class NgxGrippieComponent {\r\n  /** height of the editor */\r\n  height: number;\r\n  /** previous value befor resizing the editor */\r\n  oldY = 0;\r\n  /** set to true on mousedown event */\r\n  grabber = false;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param _editorComponent Editor component\r\n   */\r\n  constructor(private _editorComponent: NgxEditorComponent) { }\r\n\r\n  /**\r\n   *\r\n   * @param event Mouseevent\r\n   *\r\n   * Update the height of the editor when the grabber is dragged\r\n   */\r\n  @HostListener('document:mousemove', ['$event']) onMouseMove(event: MouseEvent) {\r\n    if (!this.grabber) {\r\n      return;\r\n    }\r\n\r\n    this._editorComponent.resizeTextArea(event.clientY - this.oldY);\r\n    this.oldY = event.clientY;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param event Mouseevent\r\n   *\r\n   * set the grabber to false on mouse up action\r\n   */\r\n  @HostListener('document:mouseup', ['$event']) onMouseUp(event: MouseEvent) {\r\n    this.grabber = false;\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event']) onResize(event: MouseEvent, resizer?: Function) {\r\n    this.grabber = true;\r\n    this.oldY = event.clientY;\r\n    event.preventDefault();\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\nimport { MessageService } from '../common/services/message.service';\r\n\r\n@Component({\r\n  selector: 'app-ngx-editor-message',\r\n  templateUrl: './ngx-editor-message.component.html',\r\n  styleUrls: ['./ngx-editor-message.component.scss']\r\n})\r\n\r\nexport class NgxEditorMessageComponent {\r\n  /** property that holds the message to be displayed on the editor */\r\n  ngxMessage = undefined;\r\n\r\n  /**\r\n   * @param _messageService service to send message to the editor\r\n   */\r\n  constructor(private _messageService: MessageService) {\r\n    this._messageService.getMessage().subscribe((message: string) => this.ngxMessage = message);\r\n  }\r\n\r\n  /**\r\n   * clears editor message\r\n   */\r\n  clearMessage(): void {\r\n    this.ngxMessage = undefined;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnInit, ViewChild, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { PopoverConfig } from 'ngx-bootstrap';\r\nimport { CommandExecutorService } from '../common/services/command-executor.service';\r\nimport { MessageService } from '../common/services/message.service';\r\nimport * as Utils from '../common/utils/ngx-editor.utils';\r\n\r\n@Component({\r\n  selector: 'app-ngx-editor-toolbar',\r\n  templateUrl: './ngx-editor-toolbar.component.html',\r\n  styleUrls: ['./ngx-editor-toolbar.component.scss'],\r\n  providers: [PopoverConfig]\r\n})\r\n\r\nexport class NgxEditorToolbarComponent implements OnInit {\r\n\r\n  /** holds values of the insert link form */\r\n  urlForm: FormGroup;\r\n  /** holds values of the insert image form */\r\n  imageForm: FormGroup;\r\n  /** holds values of the insert video form */\r\n  videoForm: FormGroup;\r\n  /** set to false when image is being uploaded */\r\n  uploadComplete = true;\r\n  /** upload percentage */\r\n  updloadPercentage = 0;\r\n  /** set to true when the image is being uploaded */\r\n  isUploading = false;\r\n  /** which tab to active for color insetion */\r\n  selectedColorTab = 'textColor';\r\n  /** font family name */\r\n  fontName = '';\r\n  /** font size */\r\n  fontSize = '';\r\n  /** hex color code */\r\n  hexColor = '';\r\n  /** show/hide image uploader */\r\n  isImageUploader = false;\r\n\r\n  /**\r\n   * Editor configuration\r\n   */\r\n  @Input() config: any;\r\n  @Input() uploadedImagePath: string;\r\n\r\n  @ViewChild('urlPopover') urlPopover;\r\n  @ViewChild('imagePopover') imagePopover;\r\n  @ViewChild('videoPopover') videoPopover;\r\n  @ViewChild('fontSizePopover') fontSizePopover;\r\n  @ViewChild('colorPopover') colorPopover;\r\n  /**\r\n   * Emits an event when a toolbar button is clicked\r\n   */\r\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\r\n  /**\r\n   * Emits an event then an image is selected\r\n   */\r\n  @Output() uploadImage: EventEmitter<HTMLInputElement> = new EventEmitter<HTMLInputElement>();\r\n  prevUploadedImagePath: string;\r\n\r\n  constructor(private _popOverConfig: PopoverConfig,\r\n    private _formBuilder: FormBuilder,\r\n    private _messageService: MessageService,\r\n    private _commandExecutorService: CommandExecutorService) {\r\n    this._popOverConfig.outsideClick = true;\r\n    this._popOverConfig.placement = 'bottom';\r\n    this._popOverConfig.container = 'body';\r\n  }\r\n\r\n  /**\r\n   * enable or diable toolbar based on configuration\r\n   *\r\n   * @param value name of the toolbar buttons\r\n   */\r\n  canEnableToolbarOptions(value): boolean {\r\n    return Utils.canEnableToolbarOptions(value, this.config['toolbar']);\r\n  }\r\n\r\n  /**\r\n   * triggers command from the toolbar to be executed and emits an event\r\n   *\r\n   * @param command name of the command to be executed\r\n   */\r\n  triggerCommand(command: string): void {\r\n    this.execute.emit(command);\r\n  }\r\n\r\n  /**\r\n   * create URL insert form\r\n   */\r\n  buildUrlForm(): void {\r\n    this.urlForm = this._formBuilder.group({\r\n      urlLink: ['', [Validators.required]],\r\n      urlText: ['', [Validators.required]],\r\n      urlNewTab: [true]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * inserts link in the editor\r\n   */\r\n  insertLink(): void {\r\n    try {\r\n      this._commandExecutorService.createLink(this.urlForm.value);\r\n    } catch (error) {\r\n      this._messageService.sendMessage(error.message);\r\n    }\r\n\r\n    /** reset form to default */\r\n    this.buildUrlForm();\r\n    /** close inset URL pop up */\r\n    this.urlPopover.hide();\r\n  }\r\n\r\n  /**\r\n   * create insert image form\r\n   */\r\n  buildImageForm(): void {\r\n    this.imageForm = this._formBuilder.group({\r\n      imageUrl: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * create insert image form\r\n   */\r\n  buildVideoForm(): void {\r\n    this.videoForm = this._formBuilder.group({\r\n      videoUrl: ['', [Validators.required]],\r\n      height: [''],\r\n      width: ['']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executed when file is selected\r\n   *\r\n   * @param e onChange event\r\n   */\r\n  onFileChange(e): void {\r\n    this.uploadComplete = false;\r\n    this.isUploading = true;\r\n\r\n    if (e.target.files.length > 0) {\r\n      const file = e.target.files[0];\r\n\r\n      if (!this.config.imageEndPoint) {\r\n        this.uploadImage.emit(file);\r\n        this.uploadComplete = true;\r\n        this.isUploading = false;\r\n      } else {\r\n        try {\r\n          this._commandExecutorService.uploadImage(file, this.config.imageEndPoint).subscribe(event => {\r\n            if (event.type) {\r\n              this.updloadPercentage = Math.round(100 * event.loaded / event.total);\r\n            }\r\n\r\n            if (event instanceof HttpResponse) {\r\n              try {\r\n                this._commandExecutorService.insertImage(event.body.url);\r\n              } catch (error) {\r\n                this._messageService.sendMessage(error.message);\r\n              }\r\n              this.uploadComplete = true;\r\n              this.isUploading = false;\r\n            }\r\n          });\r\n        } catch (error) {\r\n          this._messageService.sendMessage(error.message);\r\n          this.uploadComplete = true;\r\n          this.isUploading = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** insert image in the editor */\r\n  insertImage(imagepath?: string): void {\r\n    try {\r\n      this._commandExecutorService.insertImage(imagepath || this.imageForm.value.imageUrl);\r\n    } catch (error) {\r\n      this._messageService.sendMessage(error.message);\r\n    }\r\n\r\n    /** reset form to default */\r\n    this.buildImageForm();\r\n    /** close inset URL pop up */\r\n    this.imagePopover.hide();\r\n  }\r\n\r\n  /** insert image in the editor */\r\n  insertVideo(): void {\r\n    try {\r\n      this._commandExecutorService.insertVideo(this.videoForm.value);\r\n    } catch (error) {\r\n      this._messageService.sendMessage(error.message);\r\n    }\r\n\r\n    /** reset form to default */\r\n    this.buildVideoForm();\r\n    /** close inset URL pop up */\r\n    this.videoPopover.hide();\r\n  }\r\n\r\n  /** inser text/background color */\r\n  insertColor(color: string, where: string): void {\r\n    try {\r\n      this._commandExecutorService.insertColor(color, where);\r\n    } catch (error) {\r\n      this._messageService.sendMessage(error.message);\r\n    }\r\n\r\n    this.colorPopover.hide();\r\n  }\r\n\r\n  /** set font size */\r\n  setFontSize(fontSize: string): void {\r\n    try {\r\n      this._commandExecutorService.setFontSize(fontSize);\r\n    } catch (error) {\r\n      this._messageService.sendMessage(error.message);\r\n    }\r\n\r\n    this.fontSizePopover.hide();\r\n  }\r\n\r\n  /** set font Name/family */\r\n  setFontName(fontName: string): void {\r\n    try {\r\n      this._commandExecutorService.setFontName(fontName);\r\n    } catch (error) {\r\n      this._messageService.sendMessage(error.message);\r\n    }\r\n\r\n    this.fontSizePopover.hide();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildUrlForm();\r\n    this.buildImageForm();\r\n    this.buildVideoForm();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { PopoverModule } from 'ngx-bootstrap';\r\nimport { NgxEditorComponent } from './ngx-editor.component';\r\nimport { NgxGrippieComponent } from './ngx-grippie/ngx-grippie.component';\r\nimport { NgxEditorMessageComponent } from './ngx-editor-message/ngx-editor-message.component';\r\nimport { NgxEditorToolbarComponent } from './ngx-editor-toolbar/ngx-editor-toolbar.component';\r\nimport { MessageService } from './common/services/message.service';\r\nimport { CommandExecutorService } from './common/services/command-executor.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, PopoverModule.forRoot()],\r\n  declarations: [NgxEditorComponent, NgxGrippieComponent, NgxEditorMessageComponent, NgxEditorToolbarComponent],\r\n  exports: [NgxEditorComponent],\r\n  providers: [CommandExecutorService, MessageService]\r\n})\r\n\r\nexport class NgxEditorModule { }\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\ninterface IMaxLengthValidatorOptions {\r\n  excludeLineBreaks?: boolean;\r\n  concatWhiteSpaces?: boolean;\r\n  excludeWhiteSpaces?: boolean;\r\n}\r\n\r\nexport function MaxLengthValidator(maxlength: number, options?: IMaxLengthValidatorOptions) {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    const parsedDocument = new DOMParser().parseFromString(control.value, 'text/html');\r\n    let innerText = parsedDocument.body.innerText || '';\r\n\r\n    // replace all linebreaks\r\n    if (options.excludeLineBreaks) {\r\n      innerText = innerText.replace(/(\\r\\n\\t|\\n|\\r\\t)/gm, '');\r\n    }\r\n\r\n    // concat multiple whitespaces into a single whitespace\r\n    if (options.concatWhiteSpaces) {\r\n      innerText = innerText.replace(/(\\s\\s+)/gm, ' ');\r\n    }\r\n\r\n    // remove all whitespaces\r\n    if (options.excludeWhiteSpaces) {\r\n      innerText = innerText.replace(/(\\s)/gm, '');\r\n    }\r\n\r\n    if (innerText.length > maxlength) {\r\n      return {\r\n        ngxEditor: {\r\n          allowedLength: maxlength,\r\n          textLength: innerText.length\r\n        }\r\n      };\r\n    }\r\n    return null;\r\n  };\r\n}\r\n"]}