import { Component, Input } from '@angular/core';
import Icon from '../../../icons';
import { SanitizeHtmlPipe } from '../../../pipes/sanitize/sanitize-html.pipe';
import { ToggleCommands } from '../MenuCommands';
import { NgxEditorService } from '../../../editor.service';
export class BubbleComponent {
    constructor(sanitizeHTML, ngxeService) {
        this.sanitizeHTML = sanitizeHTML;
        this.ngxeService = ngxeService;
        this.execulableItems = [];
        this.activeItems = [];
        this.toolbar = [
            ['bold', 'italic', 'underline', 'strike'],
            ['ordered_list', 'bullet_list', 'blockquote', 'code'],
            ['align_left', 'align_center', 'align_right', 'align_justify']
        ];
        this.toggleCommands = [
            'bold', 'italic', 'underline', 'strike',
            'ordered_list', 'bullet_list', 'blockquote', 'code',
            'align_left', 'align_center', 'align_right', 'align_justify'
        ];
    }
    get view() {
        return this.editor.view;
    }
    getIcon(name) {
        const icon = Icon.getPath(name);
        return this.sanitizeHTML.transform(icon);
    }
    getTitle(name) {
        return this.ngxeService.locals.get(name);
    }
    onClick(e, commandName) {
        e.preventDefault();
        e.stopPropagation();
        if (e.button !== 0) {
            return;
        }
        const { state, dispatch } = this.view;
        const command = ToggleCommands[commandName];
        command.toggle()(state, dispatch);
    }
    update(view) {
        this.activeItems = [];
        this.execulableItems = [];
        const { state } = view;
        this.toggleCommands.forEach(toolbarItem => {
            const command = ToggleCommands[toolbarItem];
            const isActive = command.isActive(state);
            if (isActive) {
                this.activeItems.push(toolbarItem);
            }
            const canExecute = command.canExecute(state);
            if (canExecute) {
                this.execulableItems.push(toolbarItem);
            }
        });
    }
    ngOnInit() {
        this.updateSubscription = this.editor.update
            .subscribe((view) => {
            this.update(view);
        });
    }
    ngOnDestroy() {
        this.updateSubscription.unsubscribe();
    }
}
BubbleComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-bubble',
                template: "<ng-container *ngFor=\"let toolbarItem of toolbar; let lastToolbarItem = last\">\n  <ng-container *ngFor=\"let item of toolbarItem; let lastItem = last\">\n      <div class=\"NgxBubbleMenu__Icon\" [ngClass]=\"{'NgxBubbleMenu__Icon--Active': this.activeItems.includes(item),\n  'NgxEditor--Disabled': !this.execulableItems.includes(item)}\" (mousedown)=\"onClick($event, item)\"\n          *ngIf=\"toggleCommands.includes(item)\" [title]=\"getTitle(item)\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" height=\"20\" width=\"20\"\n              [innerHTML]=\"getIcon(item)\"></svg>\n      </div>\n      <div class=\"NgxBubbleMenu__Seperator\" *ngIf=\"lastItem && !lastToolbarItem\"></div>\n  </ng-container>\n</ng-container>\n",
                styles: ["*,:after,:before{box-sizing:border-box}:host{display:flex;background-color:#000;color:#fff;padding:.3rem;border-radius:4px}.NgxBubbleMenu__Icon{height:1.8rem;width:1.8rem;transition:.3s ease-in-out;border-radius:2px;display:flex;align-items:center;justify-content:center}.NgxBubbleMenu__Icon svg{fill:#fff}.NgxBubbleMenu__Icon:hover{background-color:#636262}.NgxBubbleMenu__Icon+.NgxBubbleMenu__Icon{margin-left:.3rem}.NgxBubbleMenu__Icon.NgxBubbleMenu__Icon--Active{background-color:#fff}.NgxBubbleMenu__Icon.NgxBubbleMenu__Icon--Active svg{fill:#000}.NgxBubbleMenu__Seperator{border-left:1px solid #fff;margin:0 5px}"]
            },] }
];
BubbleComponent.ctorParameters = () => [
    { type: SanitizeHtmlPipe },
    { type: NgxEditorService }
];
BubbleComponent.propDecorators = {
    editor: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnViYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy9tZW51L2J1YmJsZS9idWJibGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQUUsS0FBSyxFQUVqQixNQUFNLGVBQWUsQ0FBQztBQU12QixPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQztBQUVsQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFPM0QsTUFBTSxPQUFPLGVBQWU7SUFDMUIsWUFBb0IsWUFBOEIsRUFBVSxXQUE2QjtRQUFyRSxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFTekYsb0JBQWUsR0FBYyxFQUFFLENBQUM7UUFDaEMsZ0JBQVcsR0FBYyxFQUFFLENBQUM7UUFFNUIsWUFBTyxHQUFnQjtZQUNyQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQztZQUN6QyxDQUFDLGNBQWMsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQztZQUNyRCxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLGVBQWUsQ0FBQztTQUMvRCxDQUFDO1FBRUYsbUJBQWMsR0FBYztZQUMxQixNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRO1lBQ3ZDLGNBQWMsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLE1BQU07WUFDbkQsWUFBWSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsZUFBZTtTQUM3RCxDQUFDO0lBdEIyRixDQUFDO0lBRTlGLElBQVksSUFBSTtRQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQW9CRCxPQUFPLENBQUMsSUFBYTtRQUNuQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxPQUFPLENBQUMsQ0FBYSxFQUFFLFdBQW9CO1FBQ3pDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNuQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFcEIsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFFRCxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFdEMsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVPLE1BQU0sQ0FBQyxJQUFnQjtRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUU1QyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLElBQUksUUFBUSxFQUFFO2dCQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3BDO1lBRUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUU3QyxJQUFJLFVBQVUsRUFBRTtnQkFDZCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUN4QztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO2FBQ3pDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QyxDQUFDOzs7WUFuRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QiwrdkJBQXNDOzthQUV2Qzs7O1lBUlEsZ0JBQWdCO1lBRWhCLGdCQUFnQjs7O3FCQWN0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LFxuICBPbkluaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCBFZGl0b3IgZnJvbSAnLi4vLi4vLi4vRWRpdG9yJztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uLy4uL2ljb25zJztcbmltcG9ydCB7IFRCSXRlbXMgfSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBTYW5pdGl6ZUh0bWxQaXBlIH0gZnJvbSAnLi4vLi4vLi4vcGlwZXMvc2FuaXRpemUvc2FuaXRpemUtaHRtbC5waXBlJztcbmltcG9ydCB7IFRvZ2dsZUNvbW1hbmRzIH0gZnJvbSAnLi4vTWVudUNvbW1hbmRzJztcbmltcG9ydCB7IE5neEVkaXRvclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9lZGl0b3Iuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1idWJibGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vYnViYmxlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYnViYmxlLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQnViYmxlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplSFRNTDogU2FuaXRpemVIdG1sUGlwZSwgcHJpdmF0ZSBuZ3hlU2VydmljZTogTmd4RWRpdG9yU2VydmljZSkgeyB9XG5cbiAgcHJpdmF0ZSBnZXQgdmlldygpOiBFZGl0b3JWaWV3IHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IudmlldztcbiAgfVxuXG4gIEBJbnB1dCgpIGVkaXRvcjogRWRpdG9yO1xuXG4gIHByaXZhdGUgdXBkYXRlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIGV4ZWN1bGFibGVJdGVtczogVEJJdGVtc1tdID0gW107XG4gIGFjdGl2ZUl0ZW1zOiBUQkl0ZW1zW10gPSBbXTtcblxuICB0b29sYmFyOiBUQkl0ZW1zW11bXSA9IFtcbiAgICBbJ2JvbGQnLCAnaXRhbGljJywgJ3VuZGVybGluZScsICdzdHJpa2UnXSxcbiAgICBbJ29yZGVyZWRfbGlzdCcsICdidWxsZXRfbGlzdCcsICdibG9ja3F1b3RlJywgJ2NvZGUnXSxcbiAgICBbJ2FsaWduX2xlZnQnLCAnYWxpZ25fY2VudGVyJywgJ2FsaWduX3JpZ2h0JywgJ2FsaWduX2p1c3RpZnknXVxuICBdO1xuXG4gIHRvZ2dsZUNvbW1hbmRzOiBUQkl0ZW1zW10gPSBbXG4gICAgJ2JvbGQnLCAnaXRhbGljJywgJ3VuZGVybGluZScsICdzdHJpa2UnLFxuICAgICdvcmRlcmVkX2xpc3QnLCAnYnVsbGV0X2xpc3QnLCAnYmxvY2txdW90ZScsICdjb2RlJyxcbiAgICAnYWxpZ25fbGVmdCcsICdhbGlnbl9jZW50ZXInLCAnYWxpZ25fcmlnaHQnLCAnYWxpZ25fanVzdGlmeSdcbiAgXTtcblxuICBnZXRJY29uKG5hbWU6IFRCSXRlbXMpOiBTYWZlSHRtbCB7XG4gICAgY29uc3QgaWNvbiA9IEljb24uZ2V0UGF0aChuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZUhUTUwudHJhbnNmb3JtKGljb24pO1xuICB9XG5cbiAgZ2V0VGl0bGUobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5uZ3hlU2VydmljZS5sb2NhbHMuZ2V0KG5hbWUpO1xuICB9XG5cbiAgb25DbGljayhlOiBNb3VzZUV2ZW50LCBjb21tYW5kTmFtZTogVEJJdGVtcyk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKGUuYnV0dG9uICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBzdGF0ZSwgZGlzcGF0Y2ggfSA9IHRoaXMudmlldztcblxuICAgIGNvbnN0IGNvbW1hbmQgPSBUb2dnbGVDb21tYW5kc1tjb21tYW5kTmFtZV07XG4gICAgY29tbWFuZC50b2dnbGUoKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGUodmlldzogRWRpdG9yVmlldyk6IHZvaWQge1xuICAgIHRoaXMuYWN0aXZlSXRlbXMgPSBbXTtcbiAgICB0aGlzLmV4ZWN1bGFibGVJdGVtcyA9IFtdO1xuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHZpZXc7XG5cbiAgICB0aGlzLnRvZ2dsZUNvbW1hbmRzLmZvckVhY2godG9vbGJhckl0ZW0gPT4ge1xuICAgICAgY29uc3QgY29tbWFuZCA9IFRvZ2dsZUNvbW1hbmRzW3Rvb2xiYXJJdGVtXTtcblxuICAgICAgY29uc3QgaXNBY3RpdmUgPSBjb21tYW5kLmlzQWN0aXZlKHN0YXRlKTtcbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICB0aGlzLmFjdGl2ZUl0ZW1zLnB1c2godG9vbGJhckl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjYW5FeGVjdXRlID0gY29tbWFuZC5jYW5FeGVjdXRlKHN0YXRlKTtcblxuICAgICAgaWYgKGNhbkV4ZWN1dGUpIHtcbiAgICAgICAgdGhpcy5leGVjdWxhYmxlSXRlbXMucHVzaCh0b29sYmFySXRlbSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVN1YnNjcmlwdGlvbiA9IHRoaXMuZWRpdG9yLnVwZGF0ZVxuICAgICAgLnN1YnNjcmliZSgodmlldykgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZSh2aWV3KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19