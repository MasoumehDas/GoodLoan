import { Plugin, PluginKey } from 'prosemirror-state';
import { DecorationSet, Decoration } from 'prosemirror-view';
const PLACEHOLDER_CLASSNAME = 'NgxEditor__Placeholder';
const placeholderPlugin = (text) => {
    return new Plugin({
        key: new PluginKey('placeholder'),
        state: {
            init() {
                return text !== null && text !== void 0 ? text : '';
            },
            apply(tr, previousVal) {
                var _a;
                const placeholder = (_a = tr.getMeta('UPDATE_PLACEHOLDER')) !== null && _a !== void 0 ? _a : previousVal;
                return placeholder;
            }
        },
        props: {
            decorations(state) {
                var _a;
                const doc = state.doc;
                const placeholder = this.getState(state);
                if (!placeholder) {
                    return DecorationSet.empty;
                }
                if (doc.childCount === 1 && ((_a = doc === null || doc === void 0 ? void 0 : doc.firstChild) === null || _a === void 0 ? void 0 : _a.isTextblock) && doc.firstChild.content.size === 0) {
                    const placeHolderEl = document.createElement('span');
                    placeHolderEl.classList.add(PLACEHOLDER_CLASSNAME);
                    placeHolderEl.textContent = placeholder;
                    return DecorationSet.create(doc, [Decoration.widget(1, placeHolderEl)]);
                }
                return DecorationSet.empty;
            }
        }
    });
};
const ɵ0 = placeholderPlugin;
export default placeholderPlugin;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3BsdWdpbnMvcGxhY2Vob2xkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBZSxTQUFTLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRixPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTdELE1BQU0scUJBQXFCLEdBQUcsd0JBQXdCLENBQUM7QUFFdkQsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLElBQWEsRUFBVSxFQUFFO0lBQ2xELE9BQU8sSUFBSSxNQUFNLENBQUM7UUFDaEIsR0FBRyxFQUFFLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQztRQUNqQyxLQUFLLEVBQUU7WUFDTCxJQUFJO2dCQUNGLE9BQU8sSUFBSSxhQUFKLElBQUksY0FBSixJQUFJLEdBQUksRUFBRSxDQUFDO1lBQ3BCLENBQUM7WUFDRCxLQUFLLENBQUMsRUFBZSxFQUFFLFdBQW1COztnQkFDeEMsTUFBTSxXQUFXLFNBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxtQ0FBSSxXQUFXLENBQUM7Z0JBQ3BFLE9BQU8sV0FBVyxDQUFDO1lBQ3JCLENBQUM7U0FDRjtRQUNELEtBQUssRUFBRTtZQUNMLFdBQVcsQ0FBQyxLQUFrQjs7Z0JBQzVCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7Z0JBRXRCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBRXpDLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ2hCLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQztpQkFDNUI7Z0JBRUQsSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLENBQUMsV0FBSSxHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsVUFBVSwwQ0FBRSxXQUFXLENBQUEsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO29CQUM3RixNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNyRCxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO29CQUNuRCxhQUFhLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztvQkFDeEMsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDekU7Z0JBRUQsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDO1lBQzdCLENBQUM7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQzs7QUFFRixlQUFlLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGx1Z2luLCBFZGl0b3JTdGF0ZSwgUGx1Z2luS2V5LCBUcmFuc2FjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IERlY29yYXRpb25TZXQsIERlY29yYXRpb24gfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcblxuY29uc3QgUExBQ0VIT0xERVJfQ0xBU1NOQU1FID0gJ05neEVkaXRvcl9fUGxhY2Vob2xkZXInO1xuXG5jb25zdCBwbGFjZWhvbGRlclBsdWdpbiA9ICh0ZXh0Pzogc3RyaW5nKTogUGx1Z2luID0+IHtcbiAgcmV0dXJuIG5ldyBQbHVnaW4oe1xuICAgIGtleTogbmV3IFBsdWdpbktleSgncGxhY2Vob2xkZXInKSxcbiAgICBzdGF0ZToge1xuICAgICAgaW5pdCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGV4dCA/PyAnJztcbiAgICAgIH0sXG4gICAgICBhcHBseSh0cjogVHJhbnNhY3Rpb24sIHByZXZpb3VzVmFsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHRyLmdldE1ldGEoJ1VQREFURV9QTEFDRUhPTERFUicpID8/IHByZXZpb3VzVmFsO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgZGVjb3JhdGlvbnMoc3RhdGU6IEVkaXRvclN0YXRlKTogRGVjb3JhdGlvblNldCB7XG4gICAgICAgIGNvbnN0IGRvYyA9IHN0YXRlLmRvYztcblxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHRoaXMuZ2V0U3RhdGUoc3RhdGUpO1xuXG4gICAgICAgIGlmICghcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICByZXR1cm4gRGVjb3JhdGlvblNldC5lbXB0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb2MuY2hpbGRDb3VudCA9PT0gMSAmJiBkb2M/LmZpcnN0Q2hpbGQ/LmlzVGV4dGJsb2NrICYmIGRvYy5maXJzdENoaWxkLmNvbnRlbnQuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgIGNvbnN0IHBsYWNlSG9sZGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgcGxhY2VIb2xkZXJFbC5jbGFzc0xpc3QuYWRkKFBMQUNFSE9MREVSX0NMQVNTTkFNRSk7XG4gICAgICAgICAgcGxhY2VIb2xkZXJFbC50ZXh0Q29udGVudCA9IHBsYWNlaG9sZGVyO1xuICAgICAgICAgIHJldHVybiBEZWNvcmF0aW9uU2V0LmNyZWF0ZShkb2MsIFtEZWNvcmF0aW9uLndpZGdldCgxLCBwbGFjZUhvbGRlckVsKV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIERlY29yYXRpb25TZXQuZW1wdHk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsYWNlaG9sZGVyUGx1Z2luO1xuIl19